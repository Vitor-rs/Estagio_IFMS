{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"mount_file_id":"1QCg97W0jigs4cdfZtfq5M36UJYtK3Fh0","authorship_tag":"ABX9TyP2HTBKSGFxTNGtFFfU8YFe"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import pandas as pd"],"metadata":{"id":"-Y7KhNGIjTif"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df = pd.read_csv(\"/content/drive/MyDrive/Análise de dados/Professor Leucivaldo/Commodities (em andamento)/Datasets/milho_chicago.csv\")"],"metadata":{"id":"EbQdTCMb0a_G"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df.head()"],"metadata":{"id":"aLifiDhOE_gp"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df[\"Data\"] = pd.to_datetime(df[\"Data\"])\n","df[\"Data\"] = df[\"Data\"].dt.strftime(\"%d/%m/%Y\")"],"metadata":{"id":"ovnXqOPEFDko"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df.head()"],"metadata":{"id":"0mT-AcyvEd7p"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["colunas = [\"Máxima\", \"Mínima\", \"Vol.\", \"Var%\"]\n","df = df.drop(columns = colunas)"],"metadata":{"id":"WW96pc6wqwWi"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df.head()"],"metadata":{"id":"RejedfyxFmZJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["LOTE_DADOS_INVESTING_MILHO = \"/content/drive/MyDrive/Análise de dados/Professor Leucivaldo/Commodities (em andamento)/Datasets/Dados_Investing/Milho\"\n","LOTE_DADOS_INVESTING_SOJA = \"/content/drive/MyDrive/Análise de dados/Professor Leucivaldo/Commodities (em andamento)/Datasets/Dados_Investing/Soja\"\n"],"metadata":{"id":"Yfwm_0IffeE6"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import os\n","\n","arquivos_milho = os.listdir(LOTE_DADOS_INVESTING_MILHO)\n","arquivos_soja = os.listdir(LOTE_DADOS_INVESTING_SOJA)\n","\n","for arquivo in arquivos_milho:\n","  print(arquivo)\n","\n","print(\"----------------------------------------\")\n","\n","for arquivo in arquivos_soja:\n","  print(arquivo)\n"],"metadata":{"id":"83LyDOaiqDHk"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Análise 09/12/2024"],"metadata":{"id":"YIdDEXpeoaWd"}},{"cell_type":"code","source":["cme = pd.read_csv(\"/content/drive/MyDrive/Análise de dados/Professor Leucivaldo/Commodities (em andamento)/Datasets/Dados_Investing/Milho/Dados_Historicos_Milhos_Chicago_Futuro_Mar_25_ZCH25_bolsa_CME_moeda_USD.csv\")\n","b3 = pd.read_csv(\"/content/drive/MyDrive/Análise de dados/Professor Leucivaldo/Commodities (em andamento)/Datasets/Dados_Investing/Milho/Dados_Historicos_Milhos_Chicago_Futuro_Corn_Futures_Mai_25_CCMc3_bolsa_B3_moeda_BRL.csv\")"],"metadata":{"id":"u3PZabq5oe78"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["cme.columns"],"metadata":{"id":"AkZLvf0Zo2t1"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["b3.head()"],"metadata":{"id":"LuEy1nCLpbk9"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["dataset_milho = \"/content/drive/MyDrive/Análise de dados/Professor Leucivaldo/Commodities (em andamento)/Datasets/Dados_Investing\""],"metadata":{"id":"3dKX5BIFyQTb"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import os\n","\n","# Define o diretório onde os arquivos CSV estão localizados\n","diretorio_milho = \"/content/drive/MyDrive/Análise de dados/Professor Leucivaldo/Commodities (em andamento)/Datasets/Dados_Investing/Milho\"\n","\n","# Inicializa uma lista para armazenar os DataFrames\n","lista_dfs = []\n","\n","# Itera sobre cada arquivo no diretório\n","for arquivo in os.listdir(diretorio_milho):\n","  if arquivo.endswith(\".csv\"):\n","    # Constrói o caminho completo para o arquivo\n","    caminho_arquivo = os.path.join(diretorio_milho, arquivo)\n","\n","    # Lê o arquivo CSV em um DataFrame\n","    try:\n","      df = pd.read_csv(caminho_arquivo)\n","\n","      # Extrai o nome da bolsa do nome do arquivo (ajuste conforme a sua nomenclatura)\n","      nome_bolsa = arquivo.split(\"_bolsa_\")[1].split(\"_moeda\")[0]\n","\n","      # Adiciona uma coluna com o nome da bolsa\n","      df[\"Bolsa\"] = nome_bolsa\n","\n","      # Adiciona o DataFrame à lista\n","      lista_dfs.append(df)\n","    except pd.errors.ParserError:\n","      print(f\"Erro ao ler o arquivo: {arquivo}. Pulando este arquivo.\")\n","    except IndexError:\n","      print(f\"Erro ao extrair o nome da bolsa do arquivo: {arquivo}. Pulando este arquivo.\")\n","\n","\n","# Concatena todos os DataFrames em um único DataFrame\n","if lista_dfs:\n","  df_final = pd.concat(lista_dfs, ignore_index=True)\n","\n","  # Exibe as primeiras linhas do DataFrame final\n","  df_final.head()\n","\n","  # Salva o dataframe final (opcional)\n","  #df_final.to_csv(\"milho_consolidado.csv\", index=False)\n","else:\n","  print(\"Nenhum arquivo CSV encontrado ou todos os arquivos apresentaram erro.\")"],"metadata":{"id":"tkQfARc4p2QM"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df_final.head()"],"metadata":{"id":"nB-xDjVMqUsN"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# ////////"],"metadata":{"id":"ImoPgQNe9jIc"}},{"cell_type":"markdown","source":["Analisando os arquivos fornecidos, percebo que precisamos expandir nossa estrutura anterior para acomodar diferentes bolsas e commodities. Vou explicar a estrutura completa necessária:\n","Primeiro, identificamos três bolsas principais:\n","\n","CME (Chicago Mercantile Exchange) - em USD\n","B3 (Brasil, Bolsa, Balcão) - em BRL\n","CFD/CMD (Contract for Difference) - em USD\n","\n","E duas commodities:\n","\n","Milho (Corn)\n","Soja (Soybeans)\n","\n","Cada commodity tem múltiplos contratos futuros com diferentes vencimentos. Portanto, precisamos adaptar nossa estrutura para capturar essas dimensões. Aqui está a lista completa de colunas recomendadas:\n","Colunas de Referência Temporal:\n","\n","Data_Referencia (datetime)\n","Ano\n","Mes\n","Trimestre\n","\n","Colunas de Identificação do Contrato:\n","5. Commodity_Tipo (Milho/Soja)\n","6. Contrato_Mes_Vencimento\n","7. Contrato_Ano_Vencimento\n","8. Bolsa_Nome (CME/B3/CFD/CMD)\n","9. Moeda_Original (USD/BRL)\n","Dados de Preço por Bolsa (para cada bolsa, teremos):\n","10-15. CME_Precos:\n","\n","CME_Ultimo\n","CME_Abertura\n","CME_Maxima\n","CME_Minima\n","CME_Volume\n","CME_Variacao_Percentual\n","\n","16-21. B3_Precos:\n","\n","B3_Ultimo\n","B3_Abertura\n","B3_Maxima\n","B3_Minima\n","B3_Volume\n","B3_Variacao_Percentual\n","\n","22-27. CFD_CMD_Precos:\n","\n","CFD_Ultimo\n","CFD_Abertura\n","CFD_Maxima\n","CFD_Minima\n","CFD_Volume\n","CFD_Variacao_Percentual\n","\n","Medidas Padronizadas:\n","28. Medida_Base_Kg\n","29. Bushel_Medida_Padrao_Kg (25.4 kg para milho, 27.216 kg para soja)\n","30. Saca_Medida_Padrao_Kg (60 kg para ambos)\n","Conversões de Preço:\n","31. Preco_Por_Kg_USD\n","32. Preco_Por_Kg_BRL\n","33. Bushel_Preco_USD\n","34. Saca_Preco_BRL\n","Indicadores Econômicos:\n","35. Taxa_Cambio_USD_BRL\n","36. IPCA_Variacao_Mensal\n","37. IPCA_Acumulado\n","38. PIB_Nominal_BRL\n","39. PIB_Nominal_USD\n","Preços Ajustados:\n","40. Preco_Ajustado_Inflacao_BRL\n","41. Preco_Ajustado_Inflacao_USD\n","Análise de Mercado:\n","42. Spread_Entre_Bolsas_USD (diferença entre bolsas em USD)\n","43. Spread_Entre_Bolsas_BRL (diferença entre bolsas em BRL)\n","44. Arbitragem_Percentual\n","45. Media_Movel_20_USD\n","46. Media_Movel_20_BRL\n","47. Volatilidade_USD\n","48. Volatilidade_BRL\n","Esta estrutura permite:\n","\n","Comparação entre diferentes bolsas\n","Análise de diferentes vencimentos\n","Conversão entre diferentes unidades de medida\n","Análise de arbitragem entre mercados\n","Acompanhamento de indicadores econômicos\n","Análise técnica dos preços"],"metadata":{"id":"yFRxxJN_QWXX"}},{"cell_type":"code","source":["datasets_milho = \"/content/drive/MyDrive/Análise de dados/Professor Leucivaldo/Commodities (em andamento)/Datasets/Dados_Investing/Milho\"\n","datasets_soja = \"/content/drive/MyDrive/Análise de dados/Professor Leucivaldo/Commodities (em andamento)/Datasets/Dados_Investing/Soja\"\n","dataset_economico = \"/content/drive/MyDrive/Análise de dados/Professor Leucivaldo/valores_economicos.csv\"\n","dataset_milho_soja_economico_saida = \"/content/drive/MyDrive/Análise de dados/Professor Leucivaldo\"\n","\n","dataset_milho_teste = \"/content/drive/MyDrive/Análise de dados/Professor Leucivaldo/Commodities (em andamento)/Datasets/Dados_Investing/Milho/Dados_Historicos_Milhos_Chicago_Futuro_Corn_Futures_Dez_24_Cc1_bolsa_CFD_moeda_USD.csv\"\n","saida_milho_teste = \"/content/drive/MyDrive/Análise de dados/Professor Leucivaldo/Commodities (em andamento)/Datasets/Dados_Investing\""],"metadata":{"id":"vdSvYguuKVDe"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","from datetime import datetime\n","import re\n","\n","def extrair_info_arquivo(nome_arquivo):\n","   \"\"\"Extrai informações do nome do arquivo\"\"\"\n","   padrao = r'(.+?)_(.+?)_(.+?)_(\\w+)_(\\d{2})_(\\w+)_bolsa_(\\w+)_moeda_(\\w+)'\n","   match = re.match(padrao, nome_arquivo)\n","   if match:\n","       return {\n","           'commodity': match.group(2),\n","           'mes_vencimento': match.group(4),\n","           'ano_vencimento': '20' + match.group(5),\n","           'contrato': match.group(6),\n","           'bolsa': match.group(7),\n","           'moeda': match.group(8)\n","       }\n","   return None\n","\n","def padronizar_valores(df)\n","   \"\"\"Padroniza formato dos valores numéricos\"\"\"\n","   colunas_numericas = ['Último', 'Abertura', 'Máxima', 'Mínima', 'Vol.', 'Var%']\n","   for col in colunas_numericas:\n","       if col in df.columns:\n","           df[col] = pd.to_numeric(df[col].str.replace(',','.'), errors='coerce')\n","   return df\n","\n","def calcular_precos_padronizados(df, tipo, moeda):\n","   \"\"\"Calcula preços padronizados em kg\"\"\"\n","   if tipo == 'Milho':\n","       kg_por_medida = 25.4 if moeda == 'USD' else 60.0 # bushel vs saca\n","   else:  # Soja\n","       kg_por_medida = 27.2 if moeda == 'USD' else 60.0\n","\n","   df['Preco_Por_Kg'] = df['Último'] / kg_por_medida\n","   return df\n","\n","def criar_tabela_unificada():\n","   # Lê os arquivos\n","   df_milho = pd.read_csv('/content/drive/MyDrive/Análise de dados/Professor Leucivaldo/Commodities (em andamento)/Datasets/Dados_Investing/Milho/Dados_Historicos_Milhos_Chicago_Futuro_Mar_25_ZCH25_bolsa_CME_moeda_USD.csv')\n","   df_soja = pd.read_csv('/content/drive/MyDrive/Análise de dados/Professor Leucivaldo/Commodities (em andamento)/Datasets/Dados_Investing/Soja/Dados_Historicos_Soja_Chicago_Futuros_US_Soybeans_Futures_Set_25_Sc6_bolsa_CMD_moeda_USD.csv')\n","   df_econ = pd.read_csv('/content/drive/MyDrive/Análise de dados/Professor Leucivaldo/valores_economicos.csv')\n","\n","   # Extrai informações dos nomes dos arquivos\n","   info_milho = extrair_info_arquivo('Dados_Historicos_Milhos_Chicago_Futuro_Mar_25_ZCH25_bolsa_CME_moeda_USD.csv')\n","   info_soja = extrair_info_arquivo('Dados_Historicos_Soja_Chicago_Futuros_US_Soybeans_Futures_Set_25_Sc6_bolsa_CMD_moeda_USD.csv')\n","\n","   # Padroniza datas\n","   for df in [df_milho, df_soja, df_econ]:\n","       df['Data'] = pd.to_datetime(df['Data'])\n","\n","   # Padroniza valores numéricos\n","   df_milho = padronizar_valores(df_milho)\n","   df_soja = padronizar_valores(df_soja)\n","\n","   # Calcula preços padronizados\n","   df_milho = calcular_precos_padronizados(df_milho, 'Milho', info_milho['moeda'])\n","   df_soja = calcular_precos_padronizados(df_soja, 'Soja', info_soja['moeda'])\n","\n","   # Cria DataFrame unificado\n","   df_unified = pd.DataFrame()\n","   df_unified['Data_Referencia'] = df_econ['Data_Referencia']\n","\n","   # Adiciona dados econômicos\n","   colunas_econ = ['Taxa_Cambio_Valor_BR', 'IPCA_Geral_Acumulativo_Indice', 'PIB_Nominal']\n","   for col in colunas_econ:\n","       df_unified[col] = df_econ[col]\n","\n","   # Adiciona dados de commodities\n","   df_unified = pd.merge(df_unified, df_milho[['Data', 'Último', 'Preco_Por_Kg']],\n","                        left_on='Data_Referencia', right_on='Data', how='left')\n","   df_unified = df_unified.rename(columns={'Último': 'Milho_Preco_USD',\n","                                         'Preco_Por_Kg': 'Milho_Preco_Por_Kg_USD'})\n","\n","   df_unified = pd.merge(df_unified, df_soja[['Data', 'Último', 'Preco_Por_Kg']],\n","                        left_on='Data_Referencia', right_on='Data', how='left')\n","   df_unified = df_unified.rename(columns={'Último': 'Soja_Preco_USD',\n","                                         'Preco_Por_Kg': 'Soja_Preco_Por_Kg_USD'})\n","\n","   # Remove colunas duplicadas e organiza\n","   df_unified = df_unified.drop(['Data_x', 'Data_y'], axis=1, errors='ignore')\n","\n","   return df_unified\n","\n","# Executa\n","tabela_unificada = criar_tabela_unificada()\n","print(tabela_unificada.head())"],"metadata":{"id":"MoPw3ZRkRFy3"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# ////"],"metadata":{"id":"IjtGJYH1p431"}},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","import os\n","\n","class EconometricDataset:\n","    def __init__(self, file_path, exchange_rate=5.0):\n","        \"\"\"\n","        Inicializa a classe com o dataset e a taxa de câmbio.\n","\n","        :param file_path: Caminho para o arquivo CSV.\n","        :param exchange_rate: Taxa de câmbio para conversão (dólares para reais).\n","        \"\"\"\n","        print(\"Inicializando a classe EconometricDataset...\")\n","        try:\n","            self.dataset = pd.read_csv(file_path)\n","            print(f\"Dataset carregado com {self.dataset.shape[0]} linhas e {self.dataset.shape[1]} colunas.\")\n","        except FileNotFoundError:\n","            print(f\"Erro: O arquivo '{file_path}' não foi encontrado. Certifique-se de que o caminho está correto.\")\n","            raise\n","\n","        self.exchange_rate = exchange_rate\n","        print(f\"Taxa de câmbio configurada para {self.exchange_rate}.\")\n","        self._clean_data()\n","\n","    def _clean_data(self):\n","        \"\"\"\n","        Limpa e prepara os dados iniciais.\n","        \"\"\"\n","        print(\"Limpando e preparando os dados...\")\n","        # Remove caracteres como 'K', 'M' do volume e converte para numérico\n","        def convert_volume(value):\n","            if 'K' in value:\n","                return float(value.replace('K', '').replace(',', '.')) * 1_000\n","            elif 'M' in value:\n","                return float(value.replace('M', '').replace(',', '.')) * 1_000_000\n","            else:\n","                return float(value.replace(',', '.'))\n","\n","        self.dataset['Vol.'] = self.dataset['Vol.'].apply(convert_volume)\n","        print(\"Coluna 'Vol.' convertida para valores numéricos.\")\n","\n","        # Converte valores numéricos (substitui vírgulas por pontos)\n","        for col in ['Último', 'Abertura', 'Máxima', 'Mínima']:\n","            self.dataset[col] = self.dataset[col].str.replace(',', '.').astype(float)\n","            print(f\"Coluna '{col}' convertida para valores numéricos.\")\n","\n","        # Remove o símbolo de porcentagem de \"Var%\" e converte para numérico\n","        self.dataset['Var%'] = self.dataset['Var%'].str.replace('%', '').str.replace(',', '.').astype(float)\n","        print(\"Coluna 'Var%' convertida para valores numéricos.\")\n","\n","        # Converte a coluna \"Data\" para o formato datetime\n","        self.dataset['Data'] = pd.to_datetime(self.dataset['Data'], format='%d.%m.%Y')\n","        print(\"Coluna 'Data' convertida para o formato datetime.\")\n","\n","    def add_converted_columns(self):\n","        \"\"\"\n","        Adiciona colunas convertidas ao dataset (preços em diferentes unidades).\n","        \"\"\"\n","        print(\"Adicionando colunas convertidas...\")\n","        # Conversões de preços\n","        self.dataset['Preço Tonelada (USD)'] = self.dataset['Último'] * 39.37\n","        self.dataset['Preço Tonelada (BRL)'] = self.dataset['Preço Tonelada (USD)'] * self.exchange_rate\n","        self.dataset['Preço Saca (BRL)'] = self.dataset['Preço Tonelada (BRL)'] / 16.67\n","        print(\"Colunas de preços convertidas adicionadas.\")\n","\n","    def add_statistical_columns(self):\n","        \"\"\"\n","        Adiciona colunas estatísticas derivadas.\n","        \"\"\"\n","        print(\"Adicionando colunas estatísticas...\")\n","        self.dataset['Spread Diário'] = self.dataset['Máxima'] - self.dataset['Mínima']\n","        self.dataset['Volatilidade Relativa'] = self.dataset['Spread Diário'] / self.dataset['Último']\n","        self.dataset['Retorno Logarítmico'] = np.log(self.dataset['Último'] / self.dataset['Último'].shift(1))\n","        print(\"Colunas estatísticas adicionadas.\")\n","\n","    def add_temporal_columns(self):\n","        \"\"\"\n","        Adiciona colunas temporais ao dataset.\n","        \"\"\"\n","        print(\"Adicionando colunas temporais...\")\n","        self.dataset['Ano'] = self.dataset['Data'].dt.year\n","        self.dataset['Mês'] = self.dataset['Data'].dt.month\n","        print(\"Colunas temporais adicionadas.\")\n","\n","    def save_dataset(self, output_path):\n","        \"\"\"\n","        Salva o dataset atualizado em um arquivo CSV.\n","\n","        :param output_path: Caminho do arquivo de saída.\n","        \"\"\"\n","        if os.path.isdir(output_path):\n","            output_path = os.path.join(output_path, \"dataset_modificado.csv\")\n","\n","        self.dataset.to_csv(output_path, index=False)\n","        print(f\"Dataset salvo no arquivo: {output_path}\")\n","\n","    def show_sample(self, n=5):\n","        \"\"\"\n","        Mostra as primeiras linhas do dataset.\n","\n","        :param n: Número de linhas a exibir.\n","        \"\"\"\n","        print(f\"Exibindo as {n} primeiras linhas do dataset:\")\n","        print(self.dataset.head(n))\n","\n","# Exemplo de uso\n","file_path = '/content/drive/MyDrive/Análise de dados/Professor Leucivaldo/Commodities (em andamento)/Datasets/Dados_Investing/Milho/Dados_Historicos_Milhos_Chicago_Futuro_Corn_Futures_Dez_24_Cc1_bolsa_CFD_moeda_USD.csv'  # Caminho do arquivo\n","output_path = '/content/drive/MyDrive/Análise de dados/Professor Leucivaldo/Commodities (em andamento)/Datasets/Dados_Investing'  # Caminho de saída\n","exchange_rate = 5.0  # Taxa de câmbio atual\n","\n","print(\"Iniciando o processo...\")\n","try:\n","    data = EconometricDataset(file_path, exchange_rate)\n","    data.add_converted_columns()\n","    data.add_statistical_columns()\n","    data.add_temporal_columns()\n","    data.save_dataset(output_path)\n","    data.show_sample()\n","    print(\"Processo concluído.\")\n","except FileNotFoundError as e:\n","    print(f\"Erro ao processar o arquivo: {e}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qh_ZlV27p8Nc","executionInfo":{"status":"ok","timestamp":1734708917970,"user_tz":240,"elapsed":475,"user":{"displayName":"VITOR RICARDO SANTOS","userId":"01616581084380061947"}},"outputId":"ee3b5530-ea98-4a52-8fe3-026bb2d969af"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["Iniciando o processo...\n","Inicializando a classe EconometricDataset...\n","Dataset carregado com 154 linhas e 7 colunas.\n","Taxa de câmbio configurada para 5.0.\n","Limpando e preparando os dados...\n","Coluna 'Vol.' convertida para valores numéricos.\n","Coluna 'Último' convertida para valores numéricos.\n","Coluna 'Abertura' convertida para valores numéricos.\n","Coluna 'Máxima' convertida para valores numéricos.\n","Coluna 'Mínima' convertida para valores numéricos.\n","Coluna 'Var%' convertida para valores numéricos.\n","Coluna 'Data' convertida para o formato datetime.\n","Adicionando colunas convertidas...\n","Colunas de preços convertidas adicionadas.\n","Adicionando colunas estatísticas...\n","Colunas estatísticas adicionadas.\n","Adicionando colunas temporais...\n","Colunas temporais adicionadas.\n","Dataset salvo no arquivo: /content/drive/MyDrive/Análise de dados/Professor Leucivaldo/Commodities (em andamento)/Datasets/Dados_Investing/dataset_modificado.csv\n","Exibindo as 5 primeiras linhas do dataset:\n","        Data  Último  Abertura  Máxima  Mínima       Vol.   Var%  \\\n","0 2024-10-01  410.75    423.50  434.25   399.0  5160000.0  -3.30   \n","1 2024-09-01  424.75    378.00  427.75   376.5  2050000.0  12.37   \n","2 2024-08-01  378.00    382.50  393.00   360.5  3010000.0  -1.24   \n","3 2024-07-01  382.75    397.25  412.00   381.0  1760000.0  -3.65   \n","4 2024-06-01  397.25    445.75  460.50   390.5  3980000.0 -10.98   \n","\n","   Preço Tonelada (USD)  Preço Tonelada (BRL)  Preço Saca (BRL)  \\\n","0            16171.2275            80856.1375       4850.398170   \n","1            16722.4075            83612.0375       5015.719106   \n","2            14881.8600            74409.3000       4463.665267   \n","3            15068.8675            75344.3375       4519.756299   \n","4            15639.7325            78198.6625       4690.981554   \n","\n","   Spread Diário  Volatilidade Relativa  Retorno Logarítmico   Ano  Mês  \n","0          35.25               0.085819                  NaN  2024   10  \n","1          51.25               0.120659             0.033516  2024    9  \n","2          32.50               0.085979            -0.116607  2024    8  \n","3          31.00               0.080993             0.012488  2024    7  \n","4          70.00               0.176211             0.037184  2024    6  \n","Processo concluído.\n"]}]}]}